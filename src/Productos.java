
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Productos.java
 *
 * Created on 28-abr-2011, 12:08:59
 */

/**
 *
 * @author Administrador
 */
public class Productos extends javax.swing.JDialog {

    VentanaPrincipal padre;
    BusquedaAumentos busAum;
    public DemoCalendario dCale = new DemoCalendario("Fecha De Entrada De Producto");
    //public DemoCalendario dCale2 = new DemoCalendario("Fecha De Entrada De Producto");
    JFileChooser explorador = new JFileChooser();
    File fotografia = null;

    public Productos(VentanaPrincipal padre, boolean modal) {
        super(padre, modal);
        this.padre = padre;
        initComponents();
        //jLRecividoPor.setText(padre.usuario.toUpperCase());
        jLRecividoPor.setText(padre.usuario.toUpperCase());
        dCale.setTfecha(jTFechaEntrada,0);
        //dCale2.setTfecha(jTFechaEntrada2,0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPMenuEmergente = new javax.swing.JPopupMenu();
        jMCargarImagen = new javax.swing.JMenuItem();
        jPGlobal = new javax.swing.JPanel();
        jPAdicionar = new javax.swing.JPanel();
        jLImagenEmpresa = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTProducto = new javax.swing.JTextField();
        jLCodigo = new javax.swing.JLabel();
        jTCodigo = new javax.swing.JTextField();
        jLFechaEntrada = new javax.swing.JLabel();
        jTFechaEntrada = new javax.swing.JTextField();
        botonCalendarioFechaExpedicion = new javax.swing.JButton();
        jLPrecioEntrada = new javax.swing.JLabel();
        jTPrecioEntrada = new javax.swing.JTextField();
        jLPrecioVenta1 = new javax.swing.JLabel();
        jTPrecioVenta = new javax.swing.JTextField();
        jLCantidadAdicionar = new javax.swing.JLabel();
        jTCantidadAdicionar = new javax.swing.JTextField();
        jLFechaEntrada2 = new javax.swing.JLabel();
        jTProveedor = new javax.swing.JTextField();
        jBGuardar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jLRecividoPor = new javax.swing.JLabel();
        jPContenedorImagen = new javax.swing.JPanel();
        LImagenProducto = new javax.swing.JLabel();
        jLCantidadActual = new javax.swing.JLabel();
        jTCantidadActual = new javax.swing.JTextField();
        jLStock = new javax.swing.JLabel();
        jTStock = new javax.swing.JTextField();

        jMCargarImagen.setText("Cargar Imagen");
        jMCargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMCargarImagenActionPerformed(evt);
            }
        });
        jPMenuEmergente.add(jMCargarImagen);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REGISTRAR Y ADICIONAR PRODUCTOS");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPGlobal.setLayout(new java.awt.BorderLayout());

        jPAdicionar.add(this.dCale);
        busAum = new BusquedaAumentos(padre, LImagenProducto, jTStock, this.jTCantidadAdicionar, this.jLCantidadAdicionar, this.jTProducto, jBGuardar, this.jLCantidadActual, this.jTCantidadActual, jTPrecioEntrada, jTFechaEntrada, jTPrecioVenta, jTProveedor);
        this.jPAdicionar.add(busAum);
        jPAdicionar.setBackground(new java.awt.Color(255, 255, 255));
        jPAdicionar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPAdicionarKeyPressed(evt);
            }
        });

        jLImagenEmpresa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLabel1.setText("* Producto :");

        jTProducto.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTProductoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTProductoKeyReleased(evt);
            }
        });

        jLCodigo.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLCodigo.setText("* Codigo :");

        jTCodigo.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTCodigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTCodigoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTCodigoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTCodigoKeyTyped(evt);
            }
        });

        jLFechaEntrada.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLFechaEntrada.setText("* Fecha de Entrada :");

        jTFechaEntrada.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTFechaEntrada.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        botonCalendarioFechaExpedicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Calendario.gif"))); // NOI18N
        botonCalendarioFechaExpedicion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCalendarioFechaExpedicion.setMaximumSize(new java.awt.Dimension(16, 16));
        botonCalendarioFechaExpedicion.setMinimumSize(new java.awt.Dimension(16, 16));
        botonCalendarioFechaExpedicion.setPreferredSize(new java.awt.Dimension(16, 16));
        botonCalendarioFechaExpedicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCalendarioFechaExpedicionActionPerformed(evt);
            }
        });

        jLPrecioEntrada.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLPrecioEntrada.setText("* Precio de Entrada :");

        jTPrecioEntrada.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTPrecioEntrada.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTPrecioEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTPrecioEntradaKeyTyped(evt);
            }
        });

        jLPrecioVenta1.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLPrecioVenta1.setText("* Precio de Venta : ");

        jTPrecioVenta.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTPrecioVenta.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTPrecioVentaKeyTyped(evt);
            }
        });

        jLCantidadAdicionar.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLCantidadAdicionar.setText("* Adicionar :");

        jTCantidadAdicionar.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTCantidadAdicionar.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTCantidadAdicionar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTCantidadAdicionarKeyTyped(evt);
            }
        });

        jLFechaEntrada2.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLFechaEntrada2.setText("* Proveedor :");

        jTProveedor.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTProveedor.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jLRecividoPor.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLRecividoPor.setForeground(new java.awt.Color(102, 102, 255));
        jLRecividoPor.setText(" * Usario");

        jPContenedorImagen.setBackground(new java.awt.Color(255, 255, 255));
        jPContenedorImagen.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPContenedorImagen.setLayout(new java.awt.BorderLayout());

        LImagenProducto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LImagenProducto.setText("imagen Producto");
        LImagenProducto.setComponentPopupMenu(jPMenuEmergente);
        jPContenedorImagen.add(LImagenProducto, java.awt.BorderLayout.CENTER);

        jLCantidadActual.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLCantidadActual.setText("* Cantidad Actual :");

        jTCantidadActual.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTCantidadActual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTCantidadActualKeyTyped(evt);
            }
        });

        jLStock.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLStock.setText("* Stock :");

        jTStock.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTStock.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTStockKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPAdicionarLayout = new javax.swing.GroupLayout(jPAdicionar);
        jPAdicionar.setLayout(jPAdicionarLayout);
        jPAdicionarLayout.setHorizontalGroup(
            jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAdicionarLayout.createSequentialGroup()
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jBGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jBCancelar)
                        .addGap(46, 46, 46))
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLRecividoPor, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTCantidadActual, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLCantidadActual, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jPContenedorImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPAdicionarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jTProducto, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPAdicionarLayout.createSequentialGroup()
                                .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(125, 125, 125)
                                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLPrecioVenta1)
                                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                                        .addComponent(jTFechaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(botonCalendarioFechaExpedicion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLFechaEntrada))))
                        .addContainerGap(111, Short.MAX_VALUE))
                    .addComponent(jLCodigo)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAdicionarLayout.createSequentialGroup()
                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLPrecioEntrada, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPAdicionarLayout.createSequentialGroup()
                                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLCantidadAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTCantidadAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTStock)
                                            .addComponent(jLStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jTPrecioEntrada, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                                .addGap(119, 119, 119)
                                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAdicionarLayout.createSequentialGroup()
                                        .addComponent(jLFechaEntrada2, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                        .addGap(132, 132, 132))
                                    .addComponent(jTPrecioVenta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                    .addComponent(jTProveedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))))
                        .addGap(101, 101, 101))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAdicionarLayout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jLImagenEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        jPAdicionarLayout.setVerticalGroup(
            jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAdicionarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLImagenEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLCodigo)
                    .addComponent(jLFechaEntrada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTFechaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonCalendarioFechaExpedicion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jLPrecioEntrada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTPrecioEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLPrecioVenta1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jLCantidadAdicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTCantidadAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jLFechaEntrada2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jLStock)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAdicionarLayout.createSequentialGroup()
                        .addComponent(jLCantidadActual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTCantidadActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLRecividoPor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPAdicionarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBGuardar)
                            .addComponent(jBCancelar)))
                    .addComponent(jPContenedorImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                .addGap(48, 48, 48))
        );

        jPGlobal.add(jPAdicionar, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPGlobal, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCalendarioFechaExpedicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCalendarioFechaExpedicionActionPerformed
        dCale.saberFecha(jTFechaEntrada);
        dCale.titled.setTitle("Fecha de Entrada Del Producto");
        dCale.posicionJIntenal((jTFechaEntrada.getLocation().x - 10),(jTFechaEntrada.getLocation().y + 17));
        dCale.setVisible(true);
}//GEN-LAST:event_botonCalendarioFechaExpedicionActionPerformed

    //metodo para buscar el internalFrame de busqueda
    public void showInternalFrame(java.awt.event.KeyEvent evt, String nombreColumna, JTextField campoTexto){
        //inicializo tanto las filas de la tabla como el cuentafilas q me indica por donde voy
        int aux = 0;
        ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(0);
        
        busAum.setVisible(false);
        jBGuardar.setText("Guardar");
        jLCantidadAdicionar.setVisible(false);
        jTCantidadAdicionar.setVisible(false);
        //limpio los campos nenos el del nombre
        if(campoTexto == jTProducto){//si el campo q va a mostrar el internal es el del nombre, borro el id y los demas
            clernField2(1);// 1 PARA Q BORRE EL ID Y DEJE EL NOMBRE
        }else{
            clernField2(17);// SINO LE MANDO 17 PARA Q DEJE EL ID, Y BORRE EL NOMBRE Y TODOS LOS DEMAS
        }

        try{
            //consulto todos los productos que en su nombre contengan los caracteres ingresados
            //en el campo de texto
            String sql = "SELECT * FROM productos WHERE "+nombreColumna+" LIKE '%"+campoTexto.getText().toLowerCase()+"%'  ";
            ResultSet rs = padre.conectorMySql.sentencia.executeQuery(sql);
            while(rs.next()){
                System.out.println("va a mostrar la tabla");
                busAum.setLocation(campoTexto.getLocation().x - 2, campoTexto.getLocation().y  + 17);
                busAum.setVisible(true);
                //le doy el foco al campo de texto, para poder seguir escriviendo sobre el
                campoTexto.grabFocus();
                //adiciono una fila a la tabla
                ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(busAum.jTConsultas.getRowCount() + 1);
                busAum.jTConsultas.setValueAt(rs.getString("id").toUpperCase(), aux, 0);
                busAum.jTConsultas.setValueAt(rs.getString("nombre").toUpperCase(), aux, 1);
                aux++;
            }
        }catch(Exception er){
            JOptionPane.showMessageDialog(this, "error en el internalFrame : "+er.toString());
        }
       if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            busAum.dispose();
        }
       if(evt.getKeyCode() == KeyEvent.VK_F2){
            busAum.jTConsultas.grabFocus();
       }
    }


    private void jTProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProductoKeyPressed
        
        //        //inicializo tanto las filas de la tabla como el cuentafilas q me indica por donde voy
//        int aux = 0;
//        ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(0);
//
//        busAum.setVisible(false);
//        jBGuardar.setText("Guardar");
//        jLCantidadAdicionar.setVisible(false);
//        jTCantidadAdicionar.setVisible(false);
//        //limpio los campos
//        clernField2();
//
//        try{
//            //consulto todos los productos que en su nombre contengan los caracteres ingresados
//            //en el campo de texto
//            String sql = "SELECT * FROM productos WHERE nombre LIKE '%"+jTProducto.getText().toLowerCase()+"%'  ";
//            ResultSet rs = padre.conectorMySql.sentencia.executeQuery(sql);
//            while(rs.next()){
//                System.out.println("va a mostrar la tabla");
//                busAum.setLocation(this.jTProducto.getLocation().x - 2, this.jTProducto.getLocation().y  + 17);
//                busAum.setVisible(true);
//                //le doy el foco al campo de texto, para poder seguir escriviendo sobre el
//                jTProducto.grabFocus();
//                //adiciono una fila a la tabla
//                ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(busAum.jTConsultas.getRowCount() + 1);
//                busAum.jTConsultas.setValueAt(rs.getString("id").toUpperCase(), aux, 0);
//                busAum.jTConsultas.setValueAt(rs.getString("nombre").toUpperCase(), aux, 1);
//                aux++;
//            }
//        }catch(Exception er){
//            JOptionPane.showMessageDialog(this, "error en el internalFrame : "+er.toString());
//        }
//       if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
//            busAum.dispose();
//        }
//       if(evt.getKeyCode() == KeyEvent.VK_F2){
//            busAum.jTConsultas.grabFocus();
//       }
    }//GEN-LAST:event_jTProductoKeyPressed

    //validar q los campos esten validados
    public boolean validaCampos(){
        if(jTProducto.getText().isEmpty() || jTCodigo.getText().isEmpty() || jTPrecioEntrada.getText().isEmpty() || jTStock.getText().isEmpty() || jTCantidadActual.getText().isEmpty() || jTFechaEntrada.getText().isEmpty() || jTPrecioVenta.getText().isEmpty() || jTProveedor.getText().isEmpty()){
            return false;
        }else{ return true; }
    }


    //METODO PARA GUARDAR NUEVO PRODUCTO
    public void SaveProduct(){
        if(validaCampos()){
            try{
                String sql = "INSERT INTO productos VALUES('"+jTCodigo.getText().toLowerCase()+"', '"+jTProducto.getText().toLowerCase()+"', "+Integer.parseInt(jTStock.getText())+", '"+jTFechaEntrada.getText()+"', '"+jTPrecioEntrada.getText()+"', '"+jTPrecioVenta.getText()+"', "+Integer.parseInt(jTCantidadActual.getText())+", '"+jLRecividoPor.getText().toLowerCase()+"', '"+jTProveedor.getText().toLowerCase()+"', null ) ";
                padre.conectorMySql.sentencia.execute(sql);
                //ahora guardo la imagen
                if(fotografia != null){
                    //almaceno la foto
                    FileInputStream streamEntrada = new FileInputStream(fotografia);
                    PreparedStatement pstmt = padre.conectorMySql.conexion.prepareStatement("UPDATE ferreteria.productos set imagen = ? WHERE id = '"+jTCodigo.getText()+"'");
                    pstmt.setBinaryStream(1, streamEntrada, (int)fotografia.length());
                    pstmt.executeUpdate();
                    pstmt.close();
                    streamEntrada.close();
                }
                JOptionPane.showMessageDialog(null, "<html>Se ha almacenado un <b>nuevo Producto</b> llamado <b>"+jTProducto.getText().toUpperCase()+"</b></html>\nPara modoficar propiedades de este producto debe ir al panel de Configuracion.\n<html>Si presenta dudas y/o inconvenientes Comuniquese con el <B>Desarrollador De La Aplicacion.</B></html>", "Nuevo Producto..", JOptionPane.INFORMATION_MESSAGE);
                //luego de ingresar los datos limpio los campos
                clernField();
            }catch(Exception er){
                if((er.toString().indexOf("Duplicate")>0) && (er.toString().indexOf("nombre")>0)){
                    //valida duplicidad en el nombre del producto
                    JOptionPane.showMessageDialog(null, "<html>Ya hay un producto con el nombre <b>"+jTProducto.getText().toUpperCase()+"</b>, Por Rectifique, </html>\n<html>para evitar problemas de duplicidad..!</html>\n<html>Si presenta algun inconveniente, comuniquese con el <B>Desarrollador De La Aplicacion.></B></html>");
                }
                //valida duplicidad con la clave primaria
                if((er.toString().indexOf("Duplicate")>0) && (er.toString().indexOf("PRIMARY")>0)){
                    //valida duplicidad en el nombre del producto
                    JOptionPane.showMessageDialog(null, "<html>Ya hay un producto con el CODIGO <b>"+jTCodigo.getText()+"</b>, Por Rectifique, </html>\n<html>para evitar problemas de duplicidad..!</html>\n<html>Si presenta algun inconveniente, comuniquese con el <B>Desarrollador De La Aplicacion.></B></html>");
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "<html>Falta informacion, hay uno o mas Campos <b>vacios.</b></html>\n<html>Si presenta dudas y/o inconvenientes comuniquese con el <b>Desarrollador De La Aplicacion.</b></html>", "Faltan Datos.", JOptionPane.ERROR_MESSAGE);
        }
    }

    //metodo para limpiar los campos
    public void clernField(){
        jTProducto.setText("");
        jTCodigo.setText("");
        jTPrecioEntrada.setText("");
        jTCantidadAdicionar.setText("");
        jTStock.setText("");
        jTCantidadActual.setText("");
        //jTFechaEntrada.setText("");
        jTPrecioVenta.setText("");
        jTProveedor.setText("");
        LImagenProducto.setText(null);
    }
    //limpio los campos menos el nombre del producto
    public void clernField2(int num){
        if(num == 1){//si es 1 se borra el id todos los demas
            jTCodigo.setText("");
        }else{//le doy el valor de 17. Borro el nombre y todos los demas
            //jTProducto.setText("");
        }
        jTPrecioEntrada.setText("");
        jTCantidadAdicionar.setText("");
        jTStock.setText("");
        jTCantidadActual.setText("");
        //jTFechaEntrada.setText("");
        jTPrecioVenta.setText("");
        jTProveedor.setText("");
    }


    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        if(this.jBGuardar.getText().equals("Guardar")){
            //if(fotografia != null){
                SaveProduct();
//            }else{
//                JOptionPane.showMessageDialog(null, "<html>No ha suministrado una <b>Imagen</b> que se Relacione con el Producto. </html>\nPor favor rectifique..!");
//            }
        }else{
            try{
                int cant = Integer.parseInt(jTCantidadActual.getText()) + Integer.parseInt(jTCantidadAdicionar.getText());
               String sql = "UPDATE productos SET cantidad = "+cant+" WHERE id = '"+jTCodigo.getText()+"' ";
               padre.conectorMySql.sentencia.executeUpdate(sql);
               JOptionPane.showMessageDialog(null, "<html>El producto <b>"+jTProducto.getText().toUpperCase()+"</b> con codigo <b>"+jTCodigo.getText().toUpperCase()+"</b> se han <B>Actualizado</B> de manera Satisfactoria..! </html>");
               //luego de ingresar los datos limpio los campos
                clernField();
            }catch(Exception er){
                JOptionPane.showMessageDialog(null, "erro actualizando productos : "+er.toString());
            }
        }

    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jTCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCodigoKeyPressed
//
//        //inicializo tanto las filas de la tabla como el cuentafilas q me indica por donde voy
//        int aux = 0;
//        ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(0);
//
//        try{
//            //consulto todos los productos que en su nombre contengan los caracteres ingresados
//            //en el campo de texto
//            String sql = "SELECT * FROM productos WHERE id LIKE '"+jTCodigo.getText()+"%'  ";
//            ResultSet rs = padre.conectorMySql.sentencia.executeQuery(sql);
//            while(rs.next()){
//                System.out.println("va a mostrar la tabla");
//                busAum.setLocation(this.jTCodigo.getLocation().x - 2, this.jTCodigo.getLocation().y  + 17);
//                busAum.setVisible(true);
//                //le doy el foco al campo de texto, para poder seguir escriviendo sobre el
//                jTCodigo.grabFocus();
//                //adiciono una fila a la tabla
//                ((DefaultTableModel)busAum.jTConsultas.getModel()).setRowCount(busAum.jTConsultas.getRowCount() + 1);
//                busAum.jTConsultas.setValueAt(rs.getString("id").toUpperCase(), aux, 0);
//                busAum.jTConsultas.setValueAt(rs.getString("nombre").toUpperCase(), aux, 1);
//                aux++;
//            }
//            if(!rs.next()){
//                busAum.setVisible(false);
//            }
//        }catch(Exception er){
//            JOptionPane.showMessageDialog(this, "error en el internalFrame 2 : "+er.toString());
//        }
//       if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
//            busAum.dispose();
//        }
//       if(evt.getKeyCode() == KeyEvent.VK_F2){
//            busAum.jTConsultas.grabFocus();
//       }
    }//GEN-LAST:event_jTCodigoKeyPressed

    private void jPAdicionarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPAdicionarKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            busAum.dispose();
        }
    }//GEN-LAST:event_jPAdicionarKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //cuado la ventana habra hago no visibles estos controles
        this.jLCantidadActual.setVisible(false);
        this.jTCantidadActual.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void jTCantidadAdicionarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCantidadAdicionarKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTCantidadAdicionarKeyTyped

    private void jTPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPrecioVentaKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTPrecioVentaKeyTyped

    private void jTCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCodigoKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTCodigoKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.jTCantidadAdicionar.setVisible(false);
        this.jLCantidadAdicionar.setVisible(false);
        //coloco la imagen
        ImageIcon imagenFoto = new ImageIcon("temp/refrigeracion.JPG");
        Image imageAuxiliar = imagenFoto.getImage();
        imageAuxiliar = imageAuxiliar.getScaledInstance(jLImagenEmpresa.getWidth(), jLImagenEmpresa.getHeight(), Image.SCALE_AREA_AVERAGING);
        imagenFoto.setImage(imageAuxiliar);
        jLImagenEmpresa.setIcon(imagenFoto);
        jLImagenEmpresa.updateUI();
        //
        jTCantidadAdicionar.setText("0");
    }//GEN-LAST:event_formWindowOpened

    private void jMCargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMCargarImagenActionPerformed
        try{
            LImagenProducto.setText("");
            explorador.setMultiSelectionEnabled(false);
            explorador.setDialogTitle("Seleccione una Imagen..!");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Imagenes (*.png, *.jpg, *.gif)", "png","jpg", "gif");
            explorador.setFileFilter(filter);
            if(explorador.showOpenDialog(Productos.this)== JFileChooser.APPROVE_OPTION){
                fotografia = explorador.getSelectedFile();
                ImageIcon imagen = new ImageIcon(explorador.getSelectedFile().getCanonicalPath());
                java.awt.Image escala = imagen.getImage();
                escala = escala.getScaledInstance(LImagenProducto.getWidth(),LImagenProducto.getHeight(), java.awt.Image.SCALE_AREA_AVERAGING);
                imagen.setImage(escala);
                LImagenProducto.setIcon(imagen);
                LImagenProducto.updateUI();
            }
        }catch(Exception error){
            System.out.println("Error accediendo al archivo"+error.toString());
        }
    }//GEN-LAST:event_jMCargarImagenActionPerformed

    private void jTStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTStockKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTStockKeyTyped

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jTProductoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTProductoKeyReleased
        showInternalFrame(evt, "nombre", jTProducto);
    }//GEN-LAST:event_jTProductoKeyReleased

    private void jTCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCodigoKeyReleased
        showInternalFrame(evt, "id", jTCodigo);
    }//GEN-LAST:event_jTCodigoKeyReleased

    private void jTPrecioEntradaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPrecioEntradaKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTPrecioEntradaKeyTyped

    private void jTCantidadActualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTCantidadActualKeyTyped
        //codigo para ingresar solo numeros en el texField
        if(evt.getKeyChar()!=KeyEvent.VK_ENTER){
            if(!Character.isDigit(evt.getKeyChar())){
                evt.consume();
            }
        }
    }//GEN-LAST:event_jTCantidadActualKeyTyped

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LImagenProducto;
    private javax.swing.JButton botonCalendarioFechaExpedicion;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JLabel jLCantidadActual;
    private javax.swing.JLabel jLCantidadAdicionar;
    private javax.swing.JLabel jLCodigo;
    private javax.swing.JLabel jLFechaEntrada;
    private javax.swing.JLabel jLFechaEntrada2;
    private javax.swing.JLabel jLImagenEmpresa;
    private javax.swing.JLabel jLPrecioEntrada;
    private javax.swing.JLabel jLPrecioVenta1;
    private javax.swing.JLabel jLRecividoPor;
    private javax.swing.JLabel jLStock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMCargarImagen;
    private javax.swing.JPanel jPAdicionar;
    private javax.swing.JPanel jPContenedorImagen;
    private javax.swing.JPanel jPGlobal;
    private javax.swing.JPopupMenu jPMenuEmergente;
    public javax.swing.JTextField jTCantidadActual;
    public javax.swing.JTextField jTCantidadAdicionar;
    public static javax.swing.JTextField jTCodigo;
    public javax.swing.JTextField jTFechaEntrada;
    public javax.swing.JTextField jTPrecioEntrada;
    public javax.swing.JTextField jTPrecioVenta;
    public static javax.swing.JTextField jTProducto;
    public javax.swing.JTextField jTProveedor;
    public javax.swing.JTextField jTStock;
    // End of variables declaration//GEN-END:variables

}
