
////IMPORTAMOS PAQUETES AWT
import com.dilesver.pdf.PiePagina;
import com.lowagie.text.Image;
import java.awt.Color;
import java.awt.event.KeyEvent;

//***
import java.io.File;
import java.io.FileInputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


//IMPORTAMOS PAQUETES SWING
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

//IMPORTAMOS PAQUETES PARA ACCEDER A LA BASE DE DATOS
import java.sql.ResultSet;

//IMPORTAMOS PAQUETES JAVA IO
import java.io.File;
import java.io.ByteArrayOutputStream;

//IMPORTAMOS PAQUETES JAVA UTIL
import java.util.Date;
import java.util.Calendar;

//COMPLEMENTOS PARA LA IMPRESION Y FORMATO DE TEXTO
import com.lowagie.text.Font;
import com.lowagie.text.Element;
import com.lowagie.text.Document;
import com.lowagie.text.PageSize;
import java.text.SimpleDateFormat;
import com.lowagie.text.Rectangle;
import com.lowagie.text.Paragraph;
import com.lowagie.text.FontFactory;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.Image;
import java.awt.Desktop;
import java.io.FileOutputStream;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Factura.java
 *
 * Created on 20-abr-2011, 10:40:03
 */

/**
 *
 * @author Administrador
 */
public class Factura extends javax.swing.JDialog {

    VentanaPrincipal padre;
    public String fechaActual = null;
    int indicador;

    public Factura(VentanaPrincipal padre, boolean modal) {
        this.padre = padre;
        initComponents();
        //jTablaFactura.setRowHeight(12);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaFactura = new javax.swing.JTable();
        jLUsuario = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTTotal = new javax.swing.JTextField();
        jBAgregar = new javax.swing.JButton();
        jBQuitarFila = new javax.swing.JButton();
        jBFacturar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBCotizar = new javax.swing.JButton();
        jLId = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTNombreComprador = new javax.swing.JTextField();
        jRCancelado = new javax.swing.JRadioButton();
        jRSinCancelar = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jTDireccion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTTelefono = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FACTURACION");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cant.", "Descripcion", "Vr. Unitario", "Vr. Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablaFactura.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTablaFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaFacturaMouseClicked(evt);
            }
        });
        jTablaFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTablaFacturaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTablaFacturaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTablaFacturaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTablaFactura);

        jLUsuario.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLUsuario.setText("Usuario");

        jLabel5.setText("Valor Total :");

        jTTotal.setEditable(false);
        jTTotal.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTTotal.setText("0");

        jBAgregar.setText("+");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBQuitarFila.setText("-");
        jBQuitarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBQuitarFilaActionPerformed(evt);
            }
        });

        jBFacturar.setText("Facturar");
        jBFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFacturarActionPerformed(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBCotizar.setText("Cotizar");
        jBCotizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCotizarActionPerformed(evt);
            }
        });

        jLId.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLId.setForeground(new java.awt.Color(255, 0, 51));
        jLId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLId.setText("00000");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLabel2.setText("* Nombre :");

        jTNombreComprador.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTNombreComprador.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        buttonGroup1.add(jRCancelado);
        jRCancelado.setForeground(new java.awt.Color(51, 0, 255));
        jRCancelado.setText("Cancelado.");
        jRCancelado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRCanceladoMouseClicked(evt);
            }
        });

        buttonGroup1.add(jRSinCancelar);
        jRSinCancelar.setForeground(new java.awt.Color(51, 0, 255));
        jRSinCancelar.setText("Sin Cancelar.");
        jRSinCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRSinCancelarMouseClicked(evt);
            }
        });
        jRSinCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRSinCancelarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLabel3.setText("* Direcci√≥n :");

        jTDireccion.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTDireccion.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 11));
        jLabel4.setText("* Telefono :");

        jTTelefono.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTTelefono.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTTelefonoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBQuitarFila)
                        .addGap(46, 46, 46)
                        .addComponent(jLUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLId, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTNombreComprador, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRCancelado)
                        .addGap(35, 35, 35)
                        .addComponent(jRSinCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jTDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBFacturar)
                        .addGap(44, 44, 44)
                        .addComponent(jBCotizar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jBCancelar)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBQuitarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLUsuario)
                    .addComponent(jLId, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTNombreComprador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRCancelado)
                    .addComponent(jRSinCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBFacturar)
                    .addComponent(jBCotizar)
                    .addComponent(jBCancelar)
                    .addComponent(jLabel5)
                    .addComponent(jTTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        //((DefaultTableModel)jTablaFactura.getModel()).setRowCount(jTablaFactura.getRowCount() + 1);
        try{
            Ventas ob = new Ventas(padre, true, this.jTablaFactura, jTTotal);
            Miscelania.centrarVentana(ob);
            ob.setVisible(true);
        }catch(Exception er){
            JOptionPane.showMessageDialog(null, "error llamando "+er.toString());
        }
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBQuitarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBQuitarFilaActionPerformed
        System.out.println("la fila seleccionada es : "+jTablaFactura.getSelectedRow());
        //le quito 1 a la variable en padre q me guarda el numero de la fila por el q boy
        padre.filaTablaFactura = padre.filaTablaFactura - 1;

        String cantidad = null;
        String nombre = null;
        String valorUnitario = null;
        String subTotal = null;
        int back = 0;
        System.out.println("el numero de filas es : "+jTablaFactura.getRowCount());//comiensa desde 1
        int filaSgte = jTablaFactura.getSelectedRow()+1;
        int filaSelect = jTablaFactura.getSelectedRow();
        for(int i=filaSgte;i<jTablaFactura.getRowCount();i++){
            System.out.println("el ciclo se repite");
            //saco lo q tiene la fila sgte a la "borrada"
            cantidad = jTablaFactura.getValueAt(i, 0).toString();
            nombre = jTablaFactura.getValueAt(i, 1).toString();
            valorUnitario = jTablaFactura.getValueAt(i, 2).toString();
            subTotal = jTablaFactura.getValueAt(i, 3).toString();
            //coloco estos datos en la fila q "borre"
            jTablaFactura.setValueAt(cantidad, filaSelect + back, 0);
            jTablaFactura.setValueAt(nombre, filaSelect + back, 1);
            jTablaFactura.setValueAt(valorUnitario, filaSelect + back, 2);
            jTablaFactura.setValueAt(subTotal, filaSelect + back, 3);
            back++;
        }
        //ahora elimino la ultima fila
        ((DefaultTableModel)jTablaFactura.getModel()).setRowCount(jTablaFactura.getRowCount() - 1);
        //deshabilito nuevamente el boton
        jBQuitarFila.setEnabled(false);
    }//GEN-LAST:event_jBQuitarFilaActionPerformed

    private void jTablaFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablaFacturaKeyPressed
       
    }//GEN-LAST:event_jTablaFacturaKeyPressed

    //metodo para cambiar un texto a int
    public int cambiaInt(String num){
        return Integer.parseInt(num);
    }

    private void jTablaFacturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablaFacturaKeyReleased
        try{
            if(jTablaFactura.getValueAt(jTablaFactura.getSelectedRow(), 0).toString().equalsIgnoreCase("0")){
                JOptionPane.showMessageDialog(null, "La cantidad no puede ser nula, por favor Rectifique..!", "Cantidad Nula", JOptionPane.ERROR_MESSAGE);
            }else{
                String sql = "SELECT precio_venta_unidad FROM productos WHERE nombre = '"+jTablaFactura.getValueAt(jTablaFactura.getSelectedRow(), 1).toString().toLowerCase()+"' ";
                ResultSet rs = padre.conectorMySql.sentencia.executeQuery(sql);
                if(rs.next()){
                    int precio = Integer.parseInt(rs.getString("precio_venta_unidad")) * Integer.parseInt(jTablaFactura.getValueAt(jTablaFactura.getSelectedRow(), 0).toString());
                    jTablaFactura.setValueAt(precio, jTablaFactura.getSelectedRow(), 3);
                }
                int total = 0;//cambiaInt(jTTotal.getText()) + cambiaInt(jTablaFactura.getValueAt(jTablaFactura.getSelectedRow(), 3).toString());
                //sumo las cantodades totales y las muestro en TOTAL
                for(int i=0;i<jTablaFactura.getRowCount(); i++){
                    total += cambiaInt(jTablaFactura.getValueAt(i, 3).toString()) ;
                }
                //coloco el monto en total
                jTTotal.setText(""+total);
            }
        }catch(Exception er){
            JOptionPane.showMessageDialog(null, "error ingresando cantidad y dando el pricio : "+er.toString());
        }
    }//GEN-LAST:event_jTablaFacturaKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jBQuitarFila.setEnabled(false);
        padre.filaTablaFactura = 0;
        try{
//            //coloco la imagen de la empresa
//            Image imageAuxiliar;
//            ImageIcon imagenFoto = new ImageIcon("temp/refrigeracion.JPG");
//            imageAuxiliar = imagenFoto.getImage();
//            imageAuxiliar = imageAuxiliar.getScaledInstance(jLImageEmpresa.getWidth(), jLImageEmpresa.getHeight(), Image.SCALE_AREA_AVERAGING);
//            imagenFoto.setImage(imageAuxiliar);
//            jLImageEmpresa.setIcon(imagenFoto);
//            jLImageEmpresa.updateUI();

            String sql = "SELECT curdate()";
            ResultSet rs = padre.conectorMySql.sentencia.executeQuery(sql);
            if(rs.next()){
                fechaActual = rs.getString(1);
                System.out.println("la fecha actual es : "+fechaActual);
            }
            asignarIdFactura();
//            //CONSULTO EL ULTIMO NUMERO DE LA FACTURAS
//            String sql0 = "SELECT * FROM int_factura WHERE consecutivo = (SELECT COUNT(consecutivo) FROM int_factura)";
//            ResultSet rs0 = padre.conectorMySql.sentencia.executeQuery(sql0);
//            if(rs0.next()){
//                indicador = Integer.parseInt(rs0.getString("indicador"));
//                indicador++;//le sumo 1
//                //le doy formato al codigo de factura, q tenga 5 digitos
//                String longIndicador = ""+indicador;
//                System.out.println("el indicador es : "+indicador);
//                for(int i=longIndicador.length(); i<5; i++){
//                    //id almacena la cantidad de ceros q va a tener el id de la factura
//                    id = "0" + id;
//                }
//                jLId.setText(id+indicador);
//            }
        }catch(Exception er){
            JOptionPane.showMessageDialog(null, "error cargando la fecha : "+er.toString());
        }
        //COLOCO EL NOMBRE DEL USUARIO
        jLUsuario.setText(padre.usuario.toUpperCase());

        this.jBCancelar.setEnabled(false);
        this.jBCotizar.setEnabled(false);
        this.jBFacturar.setEnabled(false);

    }//GEN-LAST:event_formWindowOpened


    //metodo para asignar el id a la factura
    public void asignarIdFactura(){
        String id = ""+0;
        try{
            //CONSULTO EL ULTIMO NUMERO DE LA FACTURAS
            String sql0 = "SELECT * FROM int_factura WHERE consecutivo = (SELECT COUNT(consecutivo) FROM int_factura)";
            ResultSet rs0 = padre.conectorMySql.sentencia.executeQuery(sql0);
            if(rs0.next()){
                indicador = Integer.parseInt(rs0.getString("indicador"));
                indicador++;//le sumo 1
                //le doy formato al codigo de factura, q tenga 5 digitos
                String longIndicador = ""+indicador;
                System.out.println("el indicador es : "+indicador);
                for(int i=longIndicador.length(); i<5; i++){
                    //id almacena la cantidad de ceros q va a tener el id de la factura
                    id = "0" + id;
                }
                jLId.setText(id+indicador);
            }
        }catch(Exception er){
            JOptionPane.showMessageDialog(null, "error con el id de factura : "+er.toString());
        }
    }
    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    //definir el estado
    public String estado(){
        String estado = null;
        if(this.jRCancelado.isSelected()){
            estado = "cancelado";
        }else{
            if(this.jRSinCancelar.isSelected()){
                estado = "sin cancelado";
            }
        }
        return estado;
    }
    //limpio los campos
    public void clearner(){
        //limpio la tabla
        ((DefaultTableModel)jTablaFactura.getModel()).setRowCount(0);
        jTNombreComprador.setText("");
        jTDireccion.setText("");
        jTTelefono.setText("");
        jRCancelado.setSelected(false);
        jRSinCancelar.setSelected(false);
        jLId.setText("- - - - -");
        this.jBCancelar.setEnabled(false);
        this.jBCotizar.setEnabled(false);
        this.jBFacturar.setEnabled(false);
        this.jTTotal.setText("0");
    }
    //guardar factura
    public void saveFactur(){
        int loQueHay = 0;
        int queda = 0;
        try{
            //valido q en la tabla halla algo
            if(!jTablaFactura.getValueAt(0, 0).toString().isEmpty()){
//                //recorro un for para ingresar cada fila de la tablaFactura en la tabla de la DB
//                for(int i=0;i<jTablaFactura.getRowCount();i++){
//                    //ingreso los datos en la tabla
//                    String sql = "INSERT INTO factura VALUES ('"+jLId.getText()+"', '"+fechaActual+"', '"+jTNombreComprador.getText().toLowerCase()+"', '"+jLUsuario.getText().toLowerCase()+"', '"+estado()+"', '"+jTablaFactura.getValueAt(i, 1).toString()+"', "+jTablaFactura.getValueAt(i, 0).toString()+", '"+jTablaFactura.getValueAt(i, 2).toString()+"', '"+jTablaFactura.getValueAt(jTablaFactura.getRowCount()-1, 3).toString()+"', '"+jTTotal.getText()+"', '"+jTDireccion.getText().toLowerCase()+"', '"+jTTelefono.getText()+"')";
//                    padre.conectorMySql.sentencia.execute(sql);
//                }
                //ACTUALIZO LA TABLA int_factura PARA Q GUARDE EL INDICE DE LA PROXIMA FACTURA
                int indicadorActualizado = indicador;
                padre.conectorMySql.sentencia.executeUpdate("UPDATE int_factura SET indicador = "+indicadorActualizado+"");
                //actualizo la cantidad del producto en BODEGA
                for(int f=0;f<jTablaFactura.getRowCount();f++){
                    loQueHay = 0;
                    String updateBodega = "SELECT cantidad FROM productos WHERE nombre = '"+jTablaFactura.getValueAt(f, 1).toString().toLowerCase()+"'  ";
                    ResultSet rs = padre.conectorMySql.sentencia.executeQuery(updateBodega);
                    if(rs.next()){
                        //catidad en bodega
                        loQueHay = Integer.parseInt(rs.getString("cantidad"));
                    }
                    //lo q se vende
                    int loQueSeVende = Integer.parseInt(jTablaFactura.getValueAt(f, 0).toString());
                    queda = loQueHay - loQueSeVende;
                    if(queda>=0){
                        //actualizo la cantidad de el producto en mension
                        String sql0 = "UPDATE productos SET cantidad = "+queda+" WHERE nombre = '"+jTablaFactura.getValueAt(f, 1).toString().toLowerCase()+"' ";
                        padre.conectorMySql.sentencia.executeUpdate(sql0);
                        //recorro un for para ingresar cada fila de la tablaFactura en la tabla de la DB
                        for(int i=0;i<jTablaFactura.getRowCount();i++){
                            //ingreso los datos en la tabla
                            String sql = "INSERT INTO factura VALUES ('"+jLId.getText()+"', '"+fechaActual+"', '"+jTNombreComprador.getText().toLowerCase()+"', '"+jLUsuario.getText().toLowerCase()+"', '"+estado()+"', '"+jTablaFactura.getValueAt(i, 1).toString()+"', "+jTablaFactura.getValueAt(i, 0).toString()+", '"+jTablaFactura.getValueAt(i, 2).toString()+"', '"+jTablaFactura.getValueAt(jTablaFactura.getRowCount()-1, 3).toString()+"', '"+jTTotal.getText()+"', '"+jTDireccion.getText().toLowerCase()+"', '"+jTTelefono.getText()+"')";
                            padre.conectorMySql.sentencia.execute(sql);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "<html>No cuenta con suficientes <b>"+jTablaFactura.getValueAt(f, 1).toString().toLowerCase()+"</b> en Bodega para realizar esta Venta</html>\n<html>tan solo cuenta con <b>"+loQueHay+"</b>.</html>\n<html>Si presenta alguna inquietud favor comunicarse con el <b>Desarrollador De La Aplicacion.</b></html>","No hay suficiente..", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }//fin del for

                clearner();
                //cambio el id de factura
                asignarIdFactura();
                //JOptionPane.showMessageDialog(null, "<html></html>");
            }else{
                JOptionPane.showMessageDialog(null, "<html>No hay ningun valor en la tabla de <b>Facturas.</b> Rectifique..!</html>", "No hay que Facturar", JOptionPane.ERROR_MESSAGE);
            }
        }catch(Exception er){
            JOptionPane.showMessageDialog(null, "error guardando factura : "+er.toString());
        }
    }


    private void jBFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFacturarActionPerformed
        facturaPrint("FACTURAR");
        saveFactur();
        padre.filaTablaFactura = 0;
    }//GEN-LAST:event_jBFacturarActionPerformed

    private void jRCanceladoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRCanceladoMouseClicked
        this.jRCancelado.setText("<html><b>Cancelado</b></html>");
        jRSinCancelar.setText("Sin Cancelar");
        //habilito el boton cancelar
        jBCancelar.setEnabled(true);
        jBFacturar.setEnabled(true);
    }//GEN-LAST:event_jRCanceladoMouseClicked

    private void jRSinCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRSinCancelarMouseClicked
        jRCancelado.setText("Cancelado");
        jRSinCancelar.setText("<html><b>Sin Cancelar</b></html>");
        //habilito el boton cotizar y facturar
        jBCotizar.setEnabled(true);
        jBFacturar.setEnabled(true);
    }//GEN-LAST:event_jRSinCancelarMouseClicked

    private void jTTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTTelefonoKeyTyped
        Miscelania.numbersOnly(evt);
    }//GEN-LAST:event_jTTelefonoKeyTyped

    private void jTablaFacturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablaFacturaKeyTyped
        Miscelania.numbersOnly(evt);
    }//GEN-LAST:event_jTablaFacturaKeyTyped

    private void jRSinCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRSinCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRSinCancelarActionPerformed

    private void jTablaFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaFacturaMouseClicked
        jBQuitarFila.setEnabled(true);
    }//GEN-LAST:event_jTablaFacturaMouseClicked

    private void jBCotizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCotizarActionPerformed
        facturaPrint("cotizacion");
        try{
            File archivo = new File("Factura N¬∞ "+jLId.getText()+".pdf");
            Desktop.getDesktop().open(archivo);
        }catch(Exception er){
            System.out.println("error imprimiendo FACTURA : "+er.toString());
        }
    }//GEN-LAST:event_jBCotizarActionPerformed

    /**
    * @param args the command line arguments
    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                Factura dialog = new Factura(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBCancelar;
    public javax.swing.JButton jBCotizar;
    public javax.swing.JButton jBFacturar;
    private javax.swing.JButton jBQuitarFila;
    private javax.swing.JLabel jLId;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton jRCancelado;
    private javax.swing.JRadioButton jRSinCancelar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTDireccion;
    private javax.swing.JTextField jTNombreComprador;
    private javax.swing.JTextField jTTelefono;
    public javax.swing.JTextField jTTotal;
    public javax.swing.JTable jTablaFactura;
    // End of variables declaration//GEN-END:variables

    //metodo para imprimir
    int nombVar = 0;
    public void facturaPrint(String tipo){//si es 1 Tolu Viejo, si es 2 Cove√±as y si es 3 Todos
        SimpleDateFormat formato_fecha = new SimpleDateFormat("dd/MM/yyyy h:mm:ss a");
        Font letra_normal = FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL);
        Font letra_normalAzul = FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL);
        Font letra_normal_p = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL);
        Font letra_normal_tachada = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.UNDERLINE);
        Font letra_normal_cursiva = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC);
        Font letra_negrita_pequena = FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD);
        Font letra_negrita = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD);
        Font letra_negrita1 = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD);
        Font letra_negrita_grande = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD);
        Font letra_mediana_cursiva = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.ITALIC);
        Font letra_normal_cursiva_ROJA = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC);
        try{
//            MarcaAgua(getClass().getClassLoader().getResource("imagenes/Huella.jpg")));

            //REFERENCIA DE INTERNET
            //Document document = new Document ( PageSize .A4, 50 , 50 , 50 , 50 );

            Document documento = new Document(PageSize.LETTER);
            //MARGENES DEL DOCUMENTO
            documento.setMargins(30,30,40,45);
            ByteArrayOutputStream reporte = new ByteArrayOutputStream();
            PdfWriter pdf = PdfWriter.getInstance(documento, new FileOutputStream("Factura N¬∞ "+jLId.getText()+".pdf"));
            //MarcaAgua(getClass().getClassLoader().getResource("imagenes/Huella.jpg")));
            pdf.setPageEvent(new PiePagina("Refrielectricos La 16"));

            //HABILITO LA EDICION DEL DOCUMENTO
            documento.open();
            Image imagen = Image.getInstance(("refrielectricos.JPG"));
            //imagen.setAlignment(Image.LEFT | Image.TEXTWRAP);
            imagen.setAlignment(Image.ALIGN_CENTER);
            //REGIMEN
            PdfPTable cabezot = new PdfPTable((new float[]{0.50f,0.50f}));
            cabezot.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezot.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            cabezot.addCell(new Paragraph("Regimen Simplificado.",letra_normalAzul));
            letra_normalAzul.setColor(Color.BLUE);


            PdfPTable cabezote0 = new PdfPTable((new float[]{0.50f,0.50f}));
            cabezote0.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            //cabezote0.addCell(new Paragraph("",letra_negrita_grande));
            cabezote0.addCell(imagen);
            cabezote0.addCell(new Paragraph("FACTURA DE VENTA\n\nANTONIO MORELO PASTRANA\n Administrador\n\n\nNIT. 1.104.867.363\n\n\nFACT N¬∫ "+jLId.getText(),letra_negrita1));
            //cabezote0.addCell(new Paragraph(""+jLId.getText(),letra_normal_cursiva_azul));
            letra_negrita1.setColor(Color.BLUE);

            //VALIDO SI ES UNA COTIZACION
            PdfPTable cot = null;
            if(tipo.equalsIgnoreCase("cotizacion")){
                cot = new PdfPTable(1);
                cot.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                cot.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                cot.addCell(new Paragraph("--- COTIZACION ---",letra_normal_cursiva_ROJA));
                letra_normal_cursiva_ROJA.setColor(Color.red);
                //***
            }

            //**
            PdfPTable cabezote = new PdfPTable(1);
            //cabezote.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            cabezote.addCell(new Paragraph("FECHA : "+fechaActual,letra_mediana_cursiva));
            //***
            PdfPTable cabezote1 = new PdfPTable(1);
            //cabezote.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            cabezote1.addCell(new Paragraph("CLIENTE : "+jTNombreComprador.getText().toUpperCase(),letra_mediana_cursiva));
            //***
            PdfPTable cabezote2 = new PdfPTable(1);
            //cabezote.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            cabezote2.addCell(new Paragraph("DIRECCION : "+jTDireccion.getText().toUpperCase(),letra_mediana_cursiva));
            //***
            PdfPTable cabezote3 = new PdfPTable((new float[]{0.10f,0.40f,0.25f,0.25f}));
            //cabezote.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            cabezote3.addCell(new Paragraph("CANT. ",letra_mediana_cursiva));
            cabezote3.addCell(new Paragraph("DESCRIPCION",letra_mediana_cursiva));
            cabezote3.addCell(new Paragraph("VR.UNITARIO",letra_mediana_cursiva));
            cabezote3.addCell(new Paragraph("VR. TOTAL",letra_mediana_cursiva));
//            //***
//            PdfPTable cabezote4 = new PdfPTable((new float[]{0.10f,0.40f,0.25f,0.25f}));
//            cabezote4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//            cabezote4.addCell(new Paragraph("CANT. ",letra_mediana_cursiva));
//            cabezote4.addCell(new Paragraph("DESCRIPCION",letra_mediana_cursiva));
//            cabezote4.addCell(new Paragraph("VR.UNITARIO",letra_mediana_cursiva));
//            cabezote4.addCell(new Paragraph("VR. TOTAL",letra_mediana_cursiva));

            System.out.println("el numero de filas de la tabla es : "+jTablaFactura.getRowCount());
//            for(int i=0;i<jTablaFactura.getRowCount();i++){
//
//            }
            //***
            PdfPTable cabezote5 = new PdfPTable((new float[]{0.10f,0.40f,0.25f,0.25f}));
            cabezote5.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            for(int i=0;i<jTablaFactura.getRowCount();i++){
                //cantidad
                cabezote5.addCell(new Paragraph(jTablaFactura.getValueAt(i, 0).toString(),letra_negrita));
                //nombre
                cabezote5.addCell(new Paragraph(jTablaFactura.getValueAt(i, 1).toString(),letra_negrita));
                //valor unitario
                cabezote5.addCell(new Paragraph(jTablaFactura.getValueAt(i, 2).toString(),letra_negrita));
                //subTotal
                cabezote5.addCell(new Paragraph(jTablaFactura.getValueAt(i, 3).toString(),letra_negrita));
            }
            //Miscelania.poneSelloAgua(pdf);
            PdfPTable cabezote6 = new PdfPTable(1);
            cabezote6.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote6.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            cabezote6.addCell(new Paragraph("TOTAL = "+jTTotal.getText()+"\n",letra_mediana_cursiva));

            PdfPTable cabezote7 = new PdfPTable(1);
            cabezote7.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote7.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            cabezote7.addCell(new Paragraph("Esta Factura De Venta se Asimila en todos sus efectos legales a una Letra de Cambio(Articulo 774 del Codigo De Comercio)",letra_normal));

            PdfPTable cabezote8 = new PdfPTable(2);
            //cabezote8.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            cabezote8.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            cabezote8.addCell(new Paragraph("VENDEDOR\n"+padre.usuario.toUpperCase(),letra_negrita_pequena));
            cabezote8.addCell(new Paragraph("RECIBI CONFORME COMPRADOR\n\nC.C\n",letra_negrita_pequena));

            //documento.add(imagen);
            documento.add(cabezote0);
            if(tipo.equalsIgnoreCase("cotizacion")){
                documento.add(cot);
            }
            documento.add(cabezote);
            documento.add(cabezote1);
            documento.add(cabezote2);
            documento.add(cabezote3);
            //documento.add(cabezote4);
            documento.add(cabezote5);
            documento.add(cabezote6);
            documento.add(cabezote7);
            documento.add(cabezote8);
            //documento.add(cabezote9);

            //pdf.open();
            documento.close();
            reporte.close();
            //new Thread(new VisualizarPdf("FBControl Listado De Funcionarios",documento.setoByteArray(),true)).start();
            int opcion = JOptionPane.showConfirmDialog(null, "Desea Generar Factura ?", "Imprimir Factura", JOptionPane.YES_NO_OPTION);
            if(opcion == 0){
                try{
                    File archivo = new File("Factura N¬∞ "+jLId.getText()+".pdf");
                    Desktop.getDesktop().open(archivo);
                }catch(Exception er){
                    System.out.println("error imprimiendo FACTURA : "+er.toString());
                }
            }

        }catch(Exception er){
           System.out.println("error creando impresion del listado : "+er.toString());
        }
    }

    public void crearFila(PdfPTable nameVar){
        SimpleDateFormat formato_fecha = new SimpleDateFormat("dd/MM/yyyy h:mm:ss a");
        Font letra_normal = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL);
        Font letra_normal_p = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL);
        Font letra_normal_tachada = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.UNDERLINE);
        Font letra_normal_cursiva = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC);
        Font letra_negrita_p = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD);
        Font letra_negrita = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD);
        Font letra_negrita1 = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD);
        Font letra_negrita_grande = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD);
        Font letra_mediana_cursiva = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.ITALIC);
        Font letra_normal_cursiva_azul = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC);
        //***
        nameVar = new PdfPTable((new float[]{0.10f,0.40f,0.25f,0.25f}));
        nameVar.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        nameVar.addCell(new Paragraph("CANT. ",letra_mediana_cursiva));
        nameVar.addCell(new Paragraph("DESCRIPCION",letra_mediana_cursiva));
        nameVar.addCell(new Paragraph("VR.UNITARIO",letra_mediana_cursiva));
        nameVar.addCell(new Paragraph("VR. TOTAL",letra_mediana_cursiva));
    }

}
